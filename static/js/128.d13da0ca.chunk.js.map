{"version":3,"file":"static/js/128.d13da0ca.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.module.jsx","pages/MovieDetails/MovieDetails.jsx","services/Api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\ndisplay: flex;\nmargin: 24px;\ngap: 24px;\n\n color:#ffffff;\n`;\n\nexport const DescriptionBox = styled.div``;\n\nexport const Title = styled.h2`\nfont-weight: 700;\nfont-size: 30px;\ncolor: yellow;\n`;\n\nexport const List = styled.ul`\ndisplay: inline-flex;\ngap: 12px;\nlist-style: none;\nmargin: 0;\npadding: 0;\nlist-style-type: none;\ncolor:#ffffff;\n`;\n\nexport const Item = styled.li``;\n\nexport const InfoBox = styled.div``;\n\nexport const ListInfo = styled.ul`\ndisplay: flex;\nflex-direction: column;\ngap: 12px;\nlist-style: none;\nmargin: 0;\n padding: 0;\nlist-style-type: none;\n\n`;\n\nexport const ListInfoItem = styled.li``;\n\nexport const LinkInfo = styled(Link)`\ntext-decoration: none;\nfont-weight: 600;\nfont-size: 18px;\ncolor: #ffffff;\n\n&:hover {\n  color: yellow;\n}\n`;\n\nexport const Button = styled.button`\n// display: block;\nmargin-top:20px;\nmargin-left:20px;\npadding: 8px 16px;\nfont: inherit;\ncursor: pointer;\nborder-radius: 8px;\nborder: 3px solid #191d1e;\ncolor: #191d1e;\nfont-weight: 600;\nfont-size: 20px;\nbackground-color: rgb(26, 26, 43);\ncolor:#ffffff;\n  \n`;","import { Suspense, useState, useEffect, useRef } from 'react';\nimport { Link, Outlet, useLocation, useParams} from 'react-router-dom';\nimport { getMovieDetails } from 'services/Api';\nimport { Container, DescriptionBox, Title, List, Item, InfoBox, ListInfo, ListInfoItem, LinkInfo, Button } from './MovieDetails.module';\n\n\nconst MovieDetails = () => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backPageLink = useRef(location.state?.from ?? '/');\n\n  console.log(location);\n\n    useEffect(() => {\n        const fetchDetails = () => {\n            getMovieDetails(movieId)\n                .then((details) => {\n                    setMovieInfo(details);\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        fetchDetails();\n    }, [movieId])\n\n\n   \n  if (!movieInfo) {\n    return;\n  }\n\n  const {\n    original_title,\n    release_date,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n  } = movieInfo || {};\n\n  return (\n    <>\n      <Link to={backPageLink.current}>\n        <Button type=\"button\">Go back</Button>\n      </Link>\n      {movieInfo && (\n        <Container>\n          <img\n            width=\"300px\"\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : `https://upload.wikimedia.org/wikipedia/commons/1/14/No_Image_Available.jpg`\n            }\n            alt={original_title}\n          />\n          <DescriptionBox>\n            <Title>\n              {original_title} ({release_date.slice(0, 4)})\n            </Title>\n            <p>User score: {popularity}</p>\n            <Title>Overview</Title>\n            <p>{overview}</p>\n            <Title>Genres</Title>\n            <List>\n              {genres.map(({id, name})=> (\n                <Item key={id}>{name}</Item>\n              ))}\n            </List>\n          </DescriptionBox>\n        </Container>\n      )}\n      <hr />\n      <InfoBox>\n        <Title>Additional information</Title>\n        <ListInfo>\n          <ListInfoItem>\n            <LinkInfo to=\"cast\">Cast</LinkInfo>\n          </ListInfoItem>\n          <ListInfoItem>\n            <LinkInfo to=\"reviews\">Reviews</LinkInfo>\n          </ListInfoItem>\n        </ListInfo>\n        <hr />\n       <Suspense fallback={<div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            padding: '100px',\n            fontSize: '30px',\n            fontWeight: 700,\n\n            color: '#fff',\n\n        }}>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n       </InfoBox>\n    </>\n  );\n\n\n};\n\nexport default MovieDetails;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = 'decf0d9b807b1f4d767e254a6a4af171';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/week?api_key=${KEY}`);\n  return data.results;\n};\n\nexport const getMovieBySearchQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const movie = await axios.get(\n    `movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return movie.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${KEY}&language=en-US'`\n  );\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return data.results;\n};"],"names":["Container","styled","DescriptionBox","Title","List","Item","InfoBox","ListInfo","ListInfoItem","LinkInfo","Link","Button","useState","movieInfo","setMovieInfo","movieId","useParams","location","useLocation","backPageLink","useRef","state","from","console","log","useEffect","getMovieDetails","then","details","catch","err","original_title","release_date","popularity","overview","genres","poster_path","to","current","type","width","src","alt","slice","map","id","name","Suspense","fallback","style","display","justifyContent","padding","fontSize","fontWeight","color","axios","KEY","getTrendingMovies","data","results","getMovieBySearchQuery","query","movie","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}