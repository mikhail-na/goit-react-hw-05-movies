{"version":3,"file":"static/js/770.8f56eb78.chunk.js","mappings":"qPAEaA,EAAcC,EAAAA,EAAAA,GAAH,4DAKXC,EAAcD,EAAAA,EAAAA,GAAH,0GAQXE,EAASF,EAAAA,EAAAA,EAAH,wEAMNG,EAAcH,EAAAA,EAAAA,EAAH,qC,SC8BxB,EA7CgB,WACZ,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,YAEFC,EAAAA,EAAAA,IAAgBH,GACXI,MAAK,SAAAC,GAAG,OACLN,EAAWM,EADN,IAERC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,EACf,GAGZ,GAAE,CAACP,IAIsB,IAAnBF,EAAQY,QACV,gBAAKC,MAAO,CACTC,QAAS,OACTC,eAAgB,SAChBC,QAAS,QACTC,SAAU,OACVC,WAAY,IAEZC,MAAO,QAPV,qDAUG,+BACI,SAACzB,EAAD,UACKM,EAAQoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,UAAC3B,EAAD,YACI,UAACC,EAAD,YACI,sCADJ,IAC0ByB,MAE1B,SAACxB,EAAD,UAAcyB,MAJAF,EADT,OAYhC,C,+LC/CDG,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAM,mCAECC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,sCAAyCC,IADjC,uBACvBE,EADuB,EACvBA,KADuB,kBAExBA,EAAKC,SAFmB,2CAAH,qDAKjBC,EAAqB,mCAAG,WAAMC,GAAN,yFACZN,EAAAA,EAAAA,IAAA,+BACGC,EADH,kBACgBK,EADhB,+CADY,uBAC3BH,EAD2B,EAC3BA,KAD2B,kBAK5BA,EAAKC,SALuB,2CAAH,sDAQrBG,EAAe,mCAAG,WAAM7B,GAAN,uFACTsB,EAAAA,EAAAA,IAAA,gBACTtB,EADS,oBACUuB,EADV,oBADS,cACvBO,EADuB,yBAItBA,EAAML,MAJgB,2CAAH,sDAOfM,EAAY,mCAAG,WAAM/B,GAAN,yFACHsB,EAAAA,EAAAA,IAAA,gBACZtB,EADY,4BACeuB,EADf,qBADG,uBAClBE,EADkB,EAClBA,KADkB,kBAInBA,EAAKO,MAJc,2CAAH,sDAOZ7B,EAAe,mCAAG,WAAMH,GAAN,yFACNsB,EAAAA,EAAAA,IAAA,gBACZtB,EADY,4BACeuB,EADf,2BADM,uBACrBE,EADqB,EACrBA,KADqB,kBAItBA,EAAKC,SAJiB,2CAAH,qD","sources":["components/Reviews/Reviews.module.jsx","components/Reviews/Reviews.jsx","services/Api.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const ReviewsList = styled.ul`\npadding: 0 10px;\nlist-style:none;\n`;\n\nexport const ReviewsItem = styled.li`\nmargin-top:10px;\n\npadding:8px;\nborder: 3px solid yellow;\nborder-radius:10px;\n`;\n\nexport const Author = styled.p`\nfont-size:20px;\nfont-weight:700;\ncolor:#fff;\n`;\n\nexport const Description = styled.p`\ncolor:#fff;\n`;","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport {  useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/Api';\nimport { ReviewsList, ReviewsItem, Author, Description } from './Reviews.module';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const fetchMovieReviews = () => {\n            getMovieReviews(movieId)\n                .then(res =>\n                    setReviews(res))\n                .catch(err => {\n                    console.log(err);\n                });\n        }\n        fetchMovieReviews();\n    }, [movieId])\n\n\n   \n    return reviews.length === 0 ?\n        (<div style={{\n            display: 'flex',\n            justifyContent: 'center',\n            padding: '100px',\n            fontSize: '30px',\n            fontWeight: 700,\n\n            color: '#fff',\n\n        }}>There's no reviews, please try again..</div>) : (\n            <>     \n                <ReviewsList>\n                    {reviews.map(({ id, author, content }) => (\n                        <ReviewsItem key={id}>\n                            <Author>\n                                <span>Author:</span> {author}\n                            </Author>\n                            <Description>{content}</Description>\n                        </ReviewsItem>\n                    ))}\n                </ReviewsList>\n        \n            </>\n        );\n};\n\nexport default Reviews;\n\n\nReviews.propTypes = {\n    reviews: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n    })),\n};","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = 'decf0d9b807b1f4d767e254a6a4af171';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/week?api_key=${KEY}`);\n  return data.results;\n};\n\nexport const getMovieBySearchQuery = async query => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return data.results;\n};\n\nexport const getMovieDetails = async movieId => {\n  const movie = await axios.get(\n    `movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  return movie.data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/credits?api_key=${KEY}&language=en-US'`\n  );\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return data.results;\n};"],"names":["ReviewsList","styled","ReviewsItem","Author","Description","useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviews","then","res","catch","err","console","log","length","style","display","justifyContent","padding","fontSize","fontWeight","color","map","id","author","content","axios","KEY","getTrendingMovies","data","results","getMovieBySearchQuery","query","getMovieDetails","movie","getMovieCast","cast"],"sourceRoot":""}